hash: r5maKz5mmUNn0esOG_1OfFRij75ylI-qwgmWVAF8YzA
sigs:
  56ff9e5c1b5ec3e98172a76aa3cdc03d3ec664f147267fd99eee4dd09763c853: null
  8cc8da8ea7cbfaf6510dbc5f402b025dceaa9a3eaf7145e0ba933d468b63d358: 7c9c3d4256fe31700efcc6ae22cc5d37d153b65634bbe42291b7641bb1d20ae296f8337ae3c98139053c738df355dd34097d5d9afd5ea3068e9a2bf9284e9305
cmd: '{"networkId":"mainnet01","payload":{"exec":{"data":null,"code":";; guards.pact\n\n(namespace ''util)\n\n(module guards AUTONOMOUS\n\n  \"Functions for implementing various user guards.\"\n\n  (defcap AUTONOMOUS ()\n    (enforce false \"Non-upgradeable\"))\n\n  (defun after-date:guard (date:time)\n    \"Guard to enforce chain time is after DATE.\"\n    (create-user-guard (enforce-after-date date)))\n\n  (defun enforce-after-date:bool (date:time)\n    (enforce-time date \"after\"\n                  (> (chain-time) date)))\n\n\n  (defun at-after-date:guard (date:time)\n    \"Guard to enforce chain time is at or after DATE.\"\n    (create-user-guard (enforce-at-after-date date)))\n\n  (defun enforce-at-after-date:bool (date:time)\n    (enforce-time date \"at or after\"\n                  (>= (chain-time) date)))\n\n\n  (defun before-date:guard (date:time)\n    \"Guard to enforce chain time is before DATE.\"\n    (create-user-guard (enforce-before-date date)))\n\n  (defun enforce-before-date:bool (date:time)\n    (enforce-time date \"before\"\n                  (< (chain-time) date)))\n\n  (defun at-before-date:guard (date:time)\n    \"Guard to enforce chain time is at or before DATE.\"\n    (create-user-guard (enforce-at-before-date date)))\n\n  (defun enforce-at-before-date:bool (date:time)\n    (enforce-time date \"at or before\"\n                  (<= (chain-time) date)))\n\n  (defun enforce-time:bool (date:time msg:string test:bool)\n    (enforce test\n             (format \"Chain time must be {} {}\" [msg date])))\n\n  (defun chain-time:time ()\n    (at ''block-time (chain-data)))\n\n  (defun guard-and:guard (a:guard b:guard)\n    \"Guard to enforce both A and B.\"\n    (create-user-guard (enforce-and a b)))\n\n  (defun enforce-and:bool (a:guard b:guard)\n    (enforce-guard a)\n    (enforce-guard b))\n\n  (defun guard-or:guard (a:guard b:guard)\n    \"Guard to enforce A or B.\"\n    (create-user-guard (enforce-or a b)))\n\n  (defun enforce-or:bool (a:guard b:guard)\n    (enforce-one\n     (format \"Enforce {} or {}\" [a b])\n     [(enforce-guard a)\n      (enforce-guard b)]))\n  )\n\n;; guards1.pact\n\n(module guards1 ''util-ns-admin\n  \"************************WARNING************************\\\n  \\ This module is currently governed by ''util-ns-admin   \\\n  \\ and should not be in use until the governance is      \\\n  \\ replaced with AUTONOMOUS, meaning that the module     \\\n  \\ will be non-upgradable.                               \\\n  \\ ******************************************************\\\n  \\ Functions for implementing gas guards.\"\n\n;  (defcap AUTONOMOUS ()\n;    (enforce false \"Non-upgradeable\"))\n\n  (defun guard-all:guard (guards:[guard])\n    \"Create a guard that only succeeds if every guard in GUARDS is successfully enforced.\"\n    (enforce (< 0 (length guards)) \"Guard list cannot be empty\")\n    (create-user-guard (enforce-guard-all guards)))\n\n  (defun enforce-guard-all:bool (guards:[guard])\n    \"Enforces all guards in GUARDS\"\n    (map (enforce-guard) guards)\n  )\n\n  (defun guard-any:guard (guards:[guard])\n    \"Create a guard that succeeds if at least one guard in GUARDS is successfully enforced.\"\n    (enforce (< 0 (length guards)) \"Guard list cannot be empty\")\n    (create-user-guard (enforce-guard-any guards)))\n\n  (defun enforce-guard-any:bool (guards:[guard])\n    \"Will succeed if at least one guard in GUARDS is successfully enforced.\"\n    (enforce (< 0\n      (length\n        (filter\n          (= true)\n          (map (try-enforce-guard) guards))))\n      \"None of the guards passed\")\n  )\n\n  (defun try-enforce-guard (g:guard)\n    (try false (enforce-guard g))\n  )\n\n  (defun max-gas-notional:guard (gasNotional:decimal)\n    \"Guard to enforce gas price * gas limit is smaller than or equal to GAS\"\n    (create-user-guard\n      (enforce-below-or-at-gas-notional gasNotional)))\n\n  (defun enforce-below-gas-notional (gasNotional:decimal)\n    (enforce (< (chain-gas-notional) gasNotional)\n      (format \"Gas Limit * Gas Price must be smaller than {}\" [gasNotional])))\n\n  (defun enforce-below-or-at-gas-notional (gasNotional:decimal)\n    (enforce (<= (chain-gas-notional) gasNotional)\n      (format \"Gas Limit * Gas Price must be smaller than or equal to {}\" [gasNotional])))\n\n  (defun max-gas-price:guard (gasPrice:decimal)\n    \"Guard to enforce gas price is smaller than or equal to GAS PRICE\"\n    (create-user-guard\n      (enforce-below-or-at-gas-price gasPrice)))\n\n  (defun enforce-below-gas-price:bool (gasPrice:decimal)\n    (enforce (< (chain-gas-price) gasPrice)\n      (format \"Gas Price must be smaller than {}\" [gasPrice])))\n\n  (defun enforce-below-or-at-gas-price:bool (gasPrice:decimal)\n    (enforce (<= (chain-gas-price) gasPrice)\n      (format \"Gas Price must be smaller than or equal to {}\" [gasPrice])))\n\n  (defun max-gas-limit:guard (gasLimit:integer)\n    \"Guard to enforce gas limit is smaller than or equal to GAS LIMIT\"\n    (create-user-guard\n      (enforce-below-or-at-gas-limit gasLimit)))\n\n  (defun enforce-below-gas-limit:bool (gasLimit:integer)\n    (enforce (< (chain-gas-limit) gasLimit)\n      (format \"Gas Limit must be smaller than {}\" [gasLimit])))\n\n  (defun enforce-below-or-at-gas-limit:bool (gasLimit:integer)\n    (enforce (<= (chain-gas-limit) gasLimit)\n      (format \"Gas Limit must be smaller than or equal to {}\" [gasLimit])))\n\n  (defun chain-gas-price ()\n    \"Return gas price from chain-data\"\n    (at ''gas-price (chain-data)))\n\n  (defun chain-gas-limit ()\n    \"Return gas limit from chain-data\"\n    (at ''gas-limit (chain-data)))\n\n  (defun chain-gas-notional ()\n    \"Return gas limit * gas price from chain-data\"\n    (* (chain-gas-price) (chain-gas-limit)))\n)\n\n;;Create gas station\n(coin.create-account \"free-x-chain-gas\" (guard-all [\n      (create-user-guard (coin.gas-only))\n      (max-gas-price 0.00000001)\n      (max-gas-limit 400)\n  ])\n)\n"}},"signers":[{"pubKey":"56ff9e5c1b5ec3e98172a76aa3cdc03d3ec664f147267fd99eee4dd09763c853"},{"pubKey":"8cc8da8ea7cbfaf6510dbc5f402b025dceaa9a3eaf7145e0ba933d468b63d358"}],"meta":{"creationTime":1598288021,"ttl":57600,"gasLimit":2100,"chainId":"14","gasPrice":1.0e-12,"sender":"8cc8da8ea7cbfaf6510dbc5f402b025dceaa9a3eaf7145e0ba933d468b63d358"},"nonce":"install-util-guard-and-create-gas-station-mainnet"}'
