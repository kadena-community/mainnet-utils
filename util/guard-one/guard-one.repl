;; gas-guards.repl
(env-data
 { 'util-ns-users: ["util-ns-user"]
 , 'util-ns-admin: ["util-ns-admin"]
 })

(env-keys ["util-ns-user", "util-ns-admin"])

;;Load contracts
(begin-tx)
(load "../util/util-ns.pact")
(load "../guards/guards.pact")
(load "guard-one.pact")
(commit-tx)

(begin-tx)
(use util.guard-one)

; set chain gas price to 0.0005
(env-chain-data {
  "gas-price": 0.0005,
  "gas-limit": 500
})

;;Test max-gas

(expect
  (format "chain-gas {} is smaller than max-gas {}"
    [(chain-gas), 0.5]) true
  (enforce-guard
    (max-gas 0.5)))

(expect
  (format "chain-gas {} is at than max-gas {}"
    [(chain-gas), 0.25]) true
  (enforce-guard
    (max-gas 0.25)))

(expect-failure
  (format "chain-gas {} is bigger than than max-gas {}"
    [(chain-gas), 0.24])
  (enforce-guard
    (max-gas 0.24)))

;;Test max-gas-price
(expect
  (format "chain-gas-price {} is smaller than max-gas-price {}"
    [(chain-gas-price) 0.00051]) true
  (enforce-guard
    (max-gas-price 0.00051)))

(expect
  (format "chain-gas-price {} is at max-gas-price {}"
    [(chain-gas-price) 0.0005]) true
  (enforce-guard
    (max-gas-price 0.0005)))

(expect-failure
  (format "chain-gas-price {} is bigger than max-gas-price {}"
    [(chain-gas-price) 0.00049])
  (enforce-guard
    (max-gas-price 0.00049)))

;;Test max-gas-limit

(expect
  (format "chain-gas-limit {} is smaller than max-gas-limit {}"
    [(chain-gas-limit) 600]) true
  (enforce-guard
    (max-gas-limit 600)))

(expect
  (format "chain-gas-limit {} is at max-gas-limit {}"
    [(chain-gas-limit) 500]) true
  (enforce-guard
    (max-gas-limit 500)))

(expect-failure
  (format "chain-gas-limit {} is bigger than max-gas-limit {}"
    [(chain-gas-limit) 400])
  (enforce-guard
    (max-gas-limit 400)))

(env-chain-data {
  "gas-price": 0.0005,
  "gas-limit": 500
})

(env-data {"bob-ks": ["bob"], "ks": ["ks"]})
(env-keys ["bob"])

;;Success and failure cases
(expect "Bob-ks is signed" true
  (enforce-guard (read-keyset 'bob-ks)))
(expect "chain-gas-price is smaller than max-gas-price" true
  (enforce-guard (max-gas-price 0.0006)))
(expect "chain-gas-limit is smaller than max-gas-limit" true
  (enforce-guard (max-gas-limit 600)))
(expect-failure "ks is not signed"
  (enforce-guard (read-keyset 'ks)))
(expect-failure "chain-gas-price is bigger than max-gas-price"
  (enforce-guard (max-gas-price 0.0004)))
(expect-failure "chain-gas-limit is bigger than max-gas-limit"
  (enforce-guard (max-gas-limit 300)))

;;Test guard-all
(expect-failure "0/3 of the guard enforcements succeed"
  (enforce-guard
    (guard-all [
      (read-keyset 'ks)
      (max-gas-price 0.0004)
      (max-gas-limit 300)
    ])))

(expect-failure "1/3 of the guard enforcements succeed"
  (enforce-guard
    (guard-all [
      (read-keyset 'bob-ks)
      (max-gas-price 0.0004)
      (max-gas-limit 300)
    ])))

(expect-failure "2/3 of the guard enforcements succeed"
  (enforce-guard
    (guard-all [
      (read-keyset 'bob-ks)
      (max-gas-price 0.0006)
      (max-gas-limit 300)
    ])))

(expect "3/3 of the guard enforcements succeed" true
  (enforce-guard
    (guard-all [
      (read-keyset 'bob-ks)
      (max-gas-price 0.0006)
      (max-gas-limit 600)
      ])))

;;Test guard-any
(expect-failure "0/3 of the guard enforcements succeed"
  (enforce-guard
    (guard-any [
      (read-keyset 'ks)
      (max-gas-price 0.0004)
      (max-gas-limit 300)
    ])))

(expect "1/3 of the guard enforcements succeed" true
  (enforce-guard
    (guard-any [
      (read-keyset 'bob-ks)
      (max-gas-price 0.0004)
      (max-gas-limit 300)
    ])))

(expect "2/3 of the guard enforcements succeed" true
  (enforce-guard
    (guard-any [
      (read-keyset 'bob-ks)
      (max-gas-price 0.0006)
      (max-gas-limit 300)
    ])))

(expect "3/3 of the guard enforcements succeed" true
  (enforce-guard
    (guard-any [
      (read-keyset 'bob-ks)
      (max-gas-price 0.0006)
      (max-gas-limit 600)
      ])))

(commit-tx)
